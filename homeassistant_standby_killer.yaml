blueprint:
  name: 💡 Standby-Killer für Steckdosen (mit optionaler Deaktivierung)
  description: >
    Version: 1.1.1 (bereinigt)  
    Erstellt: Mai 2025  
    Autor: Martin

    💡 Automatisches Abschalten einer Steckdose, wenn der Stromverbrauch längere Zeit unter einem frei definierbaren Schwellenwert liegt.

    ✅ Ideal für TV, Hi-Fi, Drucker usw.  
    ✅ Wartezeit zwischen 1 Minute und 24 Stunden frei einstellbar  
    ✅ Schützt vor Sensorfehlern (z. B. "unavailable")  
    ✅ Optional abschaltbar über einen Umschalter „Standby-Killer AUS“

    ---
    ⚙️ Verwendet:
    - (optional) `input_boolean.standby_killer_aus`
    - Sensor mit Verbrauch in Watt
    - Schaltbare Steckdose
    ---

    Änderungen:
    - v1.1: Optionaler Deaktivierungsschalter, Dauerbetrieb entfernt

  domain: automation
  input:
    power_sensor:
      name: 🔌 Verbrauchssensor
      description: Wähle den Sensor aus, der den Stromverbrauch misst (z. B. sensor.tv_power).
      selector:
        entity:
          domain: sensor

    plug_switch:
      name: 🧠 Steckdose
      description: Wähle die Steckdose, die automatisch ausgeschaltet werden soll.
      selector:
        entity:
          domain: switch

    watt_threshold:
      name: ⚡ Verbrauchs-Schwelle in Watt
      description: Wenn der Verbrauch unter diesem Wert bleibt, wird nach Ablauf der Wartezeit abgeschaltet.
      default: 5
      selector:
        number:
          min: 0
          max: 50
          unit_of_measurement: W
          step: 0.1
          mode: slider

    wait_time:
      name: ⏳ Wartezeit (bis zur Abschaltung)
      description: So lange muss der Verbrauch unter der Schwelle bleiben, bevor abgeschaltet wird.
      default: "02:00:00"
      selector:
        duration:

    abschalt_sperre:
      name: 🚫 Standby-Killer AUS (optional)
      description: Wenn dieser Umschalter auf AN steht, wird **keine** Abschaltung vorgenommen.
      default: ""
      selector:
        entity:
          domain: input_boolean
          multiple: false
          

trigger:
  - platform: numeric_state
    entity_id: !input power_sensor
    below: !input watt_threshold
    for: !input wait_time

condition:
  - condition: state
    entity_id: !input plug_switch
    state: "on"
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ !input.abschalt_sperre == '' }}"
      - condition: state
        entity_id: !input abschalt_sperre
        state: "off"

action:
  - service: switch.turn_off
    target:
      entity_id: !input plug_switch

mode: single
